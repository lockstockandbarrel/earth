var tipuesearch = {"pages":[{"title":" M_time ","text":"M_time M_utf8 A WIP (Work In Progress) Fortran does not inherently provide a direct built-in function to\nconvert an arbitrary UTF-8 encoded string to UCS-4 (ISO_10646) character\nkind. While Fortran 2003 and later standards introduce support for\ndifferent character kinds, including ISO_10646 (UCS-4), the conversion\nfrom a byte-stream representing UTF-8 to the UCS-4 character kind typically\nrequires manual decoding accept when reading and writing from a file with\nencoding set to “UTF-8”. Here are some experiments in helping to facilitate using source codes\ncontaining UTF-8 encoded strings as standard Fortran Unicode characters\ninstead of as ASCII byte streams that contain UTF-8 constant strings. utf8_to_codepoints utf8_to_ucs4 utf8_to_ucs4_via_io ucs4_to_utf8 program testit use iso_fortran_env , only : stdout => output_unit use M_utf8 , only : utf8_to_ucs4 implicit none integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = :, kind = ucs4 ), allocatable :: str open ( stdout , encoding = 'UTF-8' ) ! standard method str = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) write ( stdout , * ) str ! converting pseudo-utf8 to ucs4 str = utf8_to_ucs4 ( 'Hello World and Ni Hao -- 你好' ) write ( stdout , * ) str write ( stdout , * ) len ( str ) write ( stdout , * ) str ( 27 : 27 ) end program testit Assigns between different character kinds, and an apparent\nlack of an ability to specify encoding=’UTF-8’ when using\ninternal reads and writes like you can with an OPEN(3f) \nstatement are still a little murky; as well as how the T\nfield descriptor works with multi-byte characters. Note that at least with the gfortran(1) compiler conversion\nto UCS4 internal representation works automatically when \nreading and writing from files with encoding=’utf-8’ specified,\nthis is just primarily concerned with UTF-8 string constants occuring\nin the code files themselves. backslash extension The gfortran(1) compiler supports an extension that allows for building\nucs4 strings more easily than using BOZ literals. The following example prints the Unicode symbol ☻ (black smiling face)\nof code point U+263B. The compiled binary must be executed in a terminal\nwith Unicode support, like XTerm or sakura. program main ! code to place in unicode.f90 use , intrinsic :: iso_fortran_env , only : output_unit implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) character ( kind = ucs4 , len = :), allocatable :: str ! GFORTRAN EXTENSION: str = ucs4_ 'Unicode character: \\u263B' open ( output_unit , encoding = 'utf-8' ) print '(a)' , str end program main Build and run the executable with: $ gfortran -fbackslash -o unicode unicode.f90\n$ ./unicode\nUnicode character: ☻ The -fbackslash compiler flag is required for escaped Unicode\ncharacters. Otherwise, the type conversion has to be done manually using\nBOZ literals, for instance: str = ucs4_'Unicode character: ' // char(int(z'263B'), kind=ucs4) Or, simply by using the decimal value of the character code point, without BOZ literal: str = ucs4_'Unicode character: ' // char(9787, kind=ucs2) See Also https://fortran-lang.discourse.group/t/how-to-use-utf-8-in-gfortran/9949 https://fortran-lang.discourse.group/t/how-do-i-file-read-french-special-characters-like-e-etc/6618 https://fortran-lang.discourse.group/t/using-unicode-characters-in-fortran/2764 Other languages, such as the Python encode() and decode() procedures, supply related functionality. # extract discourse as text lynx --dump https://fortran-lang.discourse.group/t/how-to-use-utf-8-in-gfortran/9949 \nlynx --dump https://fortran-lang.discourse.group/t/using-unicode-characters-in-fortran/2764 Developer Info John S. Urban","tags":"home","url":"index.html"},{"title":"ucs4_to_utf8 – M_time","text":"public  function ucs4_to_utf8(ucs4_string, err) result(string) Uses iso_fortran_env Arguments Type Intent Optional Attributes Name character(kind=ucs4, len=*), intent(in) :: ucs4_string integer, intent(out), optional :: err Return Value character(kind=ascii, len=:), allocatable Source Code function ucs4_to_utf8 ( ucs4_string , err ) result ( string ) ! ! converting UCS-4 (representing Unicode code points) to UTF-8 ! internally without using I/O directly requires manual implementation of ! the UTF-8 encoding rules because there's no direct intrinsic function ! for this conversion. ! !    UTF-8 is a variable-width encoding that uses 1 to 4 bytes to represent !    Unicode characters. ! !    The number of bytes depends on the value of the Unicode code point: !        0x0000 - 0x007F (ASCII): 1 byte (0xxxxxxx). !        0x0080 - 0x07FF: 2 bytes (110xxxxx 10xxxxxx). !        0x0800 - 0xFFFF (Basic Multilingual Plane): 3 bytes (1110xxxx 10xxxxxx 10xxxxxx). !        0x10000 - 0x10FFFF (Supplementary Planes): 4 bytes (11110xxx 10xxxxxx 10xxxxxx 10xxxxxx). ! !    Continuation bytes in multi-byte sequences always start with the !    bit pattern 10xxxxxx. ! ! Representing UCS-4 in Fortran ! !    Use the selected_char_kind('ISO_10646') intrinsic to define a kind !    for UCS-4 characters. ! !    You can declare character variables with this kind, e.g., !    character(kind=ucs4, len=<length>) :: my_ucs4_string. ! !    Individual Unicode code points can be represented using hexadecimal !    constants and the char function with the specified kind. For example, !    char(int(z'4F60'), ucs4) represents the Chinese character '你' (Ni). ! ! Conversion Algorithm (Conceptual Example) ! ! You iterate through the UCS-4 string (conceptually treating each ! character as a 4-byte integer) and apply the UTF-8 encoding rules based ! on the code point's value. You then build a new byte array or ! a character string with character(len=1) elements, representing the ! UTF-8 sequence. ! !    The Unicode standard doesn't require a BOM for UTF-8, but it may be !    encountered at the start of files. This internal conversion doesn't !    add a BOM. ! !    The example doesn't explicitly handle surrogate pairs, which are !    used in UTF-16 to represent characters outside the Basic Multilingual !    Plane. Since UCS-4 already directly represents code points, surrogates !    are not a direct concern for UCS-4 to UTF-8 conversion, but it's !    good to be aware of them when dealing with other Unicode encodings. ! use iso_fortran_env , only : error_unit implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) ! The compiler must support UCS-4 characters integer , parameter :: ascii = selected_char_kind ( 'ascii' ) ! maybe should use default, as ASCII is technically 128, not 256 chars character ( len =* , kind = ucs4 ), intent ( in ) :: ucs4_string ! stores the UCS-4 string. integer , intent ( out ), optional :: err character ( len = :, kind = ascii ), allocatable :: string ! utf8_bytes stores the resulting UTF-8 byte sequence. It's declared ! with kind=ascii and a length determined by the maximum possible ! bytes for the UCS-4 string length (each UCS-4 character can be up ! to 4 bytes in UTF-8). character ( len = len ( ucs4_string ) * 4 ) :: utf8_bytes ! Max 4 bytes per UCS-4 char integer :: i , j , code_point integer :: num_bytes , utf8_index integer , dimension ( 4 ) :: utf8_code utf8_index = 1 if ( present ( err )) err = 0 do i = 1 , len ( ucs4_string ) ! iterate through each UCS-4 character. code_point = iachar ( ucs4_string ( i : i ), kind = ucs4 ) ! Get the integer value of the UCS-4 char ! The if/else if statements check the code point value and determine ! the number of bytes required for UTF-8 encoding. ! ! Bitwise operations (ior, ishft, iand) are used to construct the ! individual UTF-8 bytes according to the standard rules. ! if ( code_point < int ( z '80' ) ) then ! 1-byte UTF-8 (ASCII) num_bytes = 1 utf8_code ( 1 ) = code_point else if ( code_point < int ( z '800' ) ) then ! 2-byte UTF-8 num_bytes = 2 utf8_code ( 1 ) = ior ( z 'C0' , ishft ( code_point , - 6 )) utf8_code ( 2 ) = ior ( z '80' , iand ( code_point , z '3F' )) else if ( code_point < int ( z '10000' ) ) then ! 3-byte UTF-8 num_bytes = 3 utf8_code ( 1 ) = ior ( z 'E0' , ishft ( code_point , - 12 )) utf8_code ( 2 ) = ior ( z '80' , iand ( ishft ( code_point , - 6 ), z '3F' )) utf8_code ( 3 ) = ior ( z '80' , iand ( code_point , z '3F' )) else if ( code_point < int ( z '110000' ) ) then ! 4-byte UTF-8 num_bytes = 4 utf8_code ( 1 ) = ior ( z 'F0' , ishft ( code_point , - 18 )) utf8_code ( 2 ) = ior ( z '80' , iand ( ishft ( code_point , - 12 ), z '3F' )) utf8_code ( 3 ) = ior ( z '80' , iand ( ishft ( code_point , - 6 ), z '3F' )) utf8_code ( 4 ) = ior ( z '80' , iand ( code_point , z '3F' )) else ! Handle invalid code points or error conditions as needed write ( error_unit , * ) \"Error: Invalid Unicode code point:\" , code_point if (. not . present ( err )) stop 1 err = err + 1 cycle endif ! Append the UTF-8 bytes to the utf8_bytes string do j = 1 , num_bytes ! The utf8_bytes string is built byte by byte using char with kind=ascii. utf8_bytes ( utf8_index : utf8_index ) = char ( utf8_code ( j ), kind = ascii ) utf8_index = utf8_index + 1 enddo enddo string = trim ( utf8_bytes ( 1 : utf8_index - 1 )) ! the UTF-8 byte sequence end function ucs4_to_utf8","tags":"","url":"proc/ucs4_to_utf8.html"},{"title":"ucs4_to_utf8_via_io – M_time","text":"public  function ucs4_to_utf8_via_io(ucs4_string) result(corrected) Arguments Type Intent Optional Attributes Name character(kind=ucs4, len=*), intent(in) :: ucs4_string Return Value character(kind=ascii, len=:), allocatable Source Code function ucs4_to_utf8_via_io ( ucs4_string ) result ( corrected ) character ( len =* , kind = ucs4 ), intent ( in ) :: ucs4_string character ( len = :, kind = ascii ), allocatable :: corrected character ( len = ( len ( ucs4_string ) * 4 ), kind = ascii ) :: line integer :: lun open ( newunit = lun , encoding = 'UTF-8' , status = 'scratch' ) write ( lun , '(A)' ) ucs4_string rewind ( lun ) open ( unit = lun , encoding = 'default' ) read ( lun , '(A)' ) line close ( lun ) corrected = trim ( line ) end function ucs4_to_utf8_via_io","tags":"","url":"proc/ucs4_to_utf8_via_io.html"},{"title":"utf8_to_ucs4 – M_time","text":"public  function utf8_to_ucs4(string) result(corrected) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value character(kind=ucs4, len=:), allocatable Source Code function utf8_to_ucs4 ( string ) result ( corrected ) ! return a string of kind ucs4 character ( len =* ), intent ( in ) :: string character ( len = :, kind = ucs4 ), allocatable :: corrected integer , allocatable :: codepoints (:) integer :: i , n integer :: err call utf8_to_codepoints ( string , codepoints , err ) n = size ( codepoints ) allocate ( character ( len = n , kind = ucs4 ) :: corrected ) do i = 1 , n corrected ( i : i ) = char ( codepoints ( i ), kind = ucs4 ) enddo end function utf8_to_ucs4","tags":"","url":"proc/utf8_to_ucs4.html"},{"title":"utf8_to_ucs4_via_io – M_time","text":"public  function utf8_to_ucs4_via_io(string) result(corrected) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value character(kind=ucs4, len=:), allocatable Source Code function utf8_to_ucs4_via_io ( string ) result ( corrected ) character ( len =* ), intent ( in ) :: string character ( len = :, kind = ucs4 ), allocatable :: corrected character ( len = ( len ( string )), kind = ucs4 ) :: line integer :: lun open ( newunit = lun , encoding = 'UTF-8' , status = 'scratch' ) write ( lun , '(A)' ) string rewind ( lun ) read ( lun , '(A)' ) line close ( lun ) corrected = trim ( line ) end function utf8_to_ucs4_via_io","tags":"","url":"proc/utf8_to_ucs4_via_io.html"},{"title":"utf8_to_codepoints – M_time","text":"public  subroutine utf8_to_codepoints(utf8, out, err) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: utf8 integer, intent(out), allocatable :: out (:) integer, intent(out) :: err Source Code subroutine utf8_to_codepoints ( utf8 , out , err ) character ( len =* ), intent ( in ) :: utf8 integer , allocatable , intent ( out ) :: out (:) ! Unicode code points integer , intent ( out ) :: err integer :: n_out integer :: i , len8 , b1 , b2 , b3 , b4 integer :: cp , nbytes integer :: temp ( 4 * len ( utf8 )) ! big enough to hold all of utf8 if each single byte required four err = 0 len8 = len_trim ( utf8 ) i = 1 n_out = 0 do while ( i <= len8 ) b1 = iachar ( utf8 ( i : i )) if ( b1 < 0 ) b1 = b1 + 256 select case ( b1 ) case ( 0 : 127 ) cp = b1 nbytes = 1 case ( 192 : 223 ) if ( i + 1 > len8 ) then ; err = 1 ; return ; endif b2 = iachar ( utf8 ( i + 1 : i + 1 )); if ( b2 < 0 ) b2 = b2 + 256 if ( iand ( b2 , 192 ) /= 128 ) then ; err = 2 ; return ; endif cp = iand ( b1 , 31 ) cp = ishft ( cp , 6 ) + iand ( b2 , 63 ) nbytes = 2 case ( 224 : 239 ) if ( i + 2 > len8 ) then ; err = 1 ; return ; endif b2 = iachar ( utf8 ( i + 1 : i + 1 )); if ( b2 < 0 ) b2 = b2 + 256 b3 = iachar ( utf8 ( i + 2 : i + 2 )); if ( b3 < 0 ) b3 = b3 + 256 if ( iand ( b2 , 192 ) /= 128 . or . iand ( b3 , 192 ) /= 128 ) then ; err = 2 ; return ; endif cp = iand ( b1 , 15 ) cp = ishft ( cp , 6 ) + iand ( b2 , 63 ) cp = ishft ( cp , 6 ) + iand ( b3 , 63 ) nbytes = 3 case ( 240 : 247 ) if ( i + 3 > len8 ) then ; err = 1 ; return ; endif b2 = iachar ( utf8 ( i + 1 : i + 1 )); if ( b2 < 0 ) b2 = b2 + 256 b3 = iachar ( utf8 ( i + 2 : i + 2 )); if ( b3 < 0 ) b3 = b3 + 256 b4 = iachar ( utf8 ( i + 3 : i + 3 )); if ( b4 < 0 ) b4 = b4 + 256 if ( iand ( b2 , 192 ) /= 128 . or . iand ( b3 , 192 ) /= 128 . or . iand ( b4 , 192 ) /= 128 ) then err = 2 ; return endif cp = iand ( b1 , 7 ) cp = ishft ( cp , 6 ) + iand ( b2 , 63 ) cp = ishft ( cp , 6 ) + iand ( b3 , 63 ) cp = ishft ( cp , 6 ) + iand ( b4 , 63 ) nbytes = 4 case default err = 3 return end select if ( n_out >= size ( temp )) then err = 4 return endif n_out = n_out + 1 temp ( n_out ) = cp i = i + nbytes enddo allocate ( out ( n_out )) out = temp ( 1 : n_out ) end subroutine utf8_to_codepoints","tags":"","url":"proc/utf8_to_codepoints.html"},{"title":"utf8_to_utf32 – M_time","text":"function utf8_to_utf32(string) result(corrected) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value character(kind=ucs4, len=:), allocatable Variables Type Visibility Attributes Name Initial character(kind=ucs4, len=255), public :: line integer, public :: lun Source Code function utf8_to_utf32 ( string ) result ( corrected ) character ( len =* ), intent ( in ) :: string character ( len = :, kind = ucs4 ), allocatable :: corrected character ( len = 255 , kind = ucs4 ) :: line integer :: lun open ( newunit = lun , encoding = 'UTF-8' , status = 'scratch' ) write ( lun , '(A)' ) string rewind ( lun ) read ( lun , '(A)' ) line close ( lun ) corrected = trim ( line ) open ( output_unit , encoding = 'UTF-8' ) end function utf8_to_utf32","tags":"","url":"proc/utf8_to_utf32.html"},{"title":"create_date_string – M_time","text":"subroutine create_date_string(string) Arguments Type Intent Optional Attributes Name character(kind=ucs4, len=*) :: string Variables Type Visibility Attributes Name Initial character(kind=ucs4, len=1), public, parameter :: gatsu = char(int(z'6708'), ucs4) character(kind=ucs4, len=1), public, parameter :: nen = char(int(z'5e74'), ucs4) character(kind=ucs4, len=1), public, parameter :: nichi = char(int(z'65e5'), ucs4) integer, public, parameter :: ucs4 = selected_char_kind(\"ISO_10646\") integer, public :: values (8) Source Code subroutine create_date_string ( string ) intrinsic date_and_time , selected_char_kind integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = 1 , kind = ucs4 ), parameter :: & nen = char ( int ( z '5e74' ), ucs4 ), & ! year gatsu = char ( int ( z '6708' ), ucs4 ), & ! month nichi = char ( int ( z '65e5' ), ucs4 ) ! day character ( len = * , kind = ucs4 ) string integer values ( 8 ) call date_and_time ( values = values ) write ( string , 101 ) values ( 1 ), nen , values ( 2 ), gatsu , values ( 3 ), nichi 101 format ( * ( i0 , a )) end subroutine create_date_string","tags":"","url":"proc/create_date_string.html"},{"title":"checkit – M_time","text":"subroutine checkit(label, test) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: label logical, intent(in) :: test Source Code subroutine checkit ( label , test ) character ( len =* ), intent ( in ) :: label logical , intent ( in ) :: test write ( * , * ) merge ( 'PASSED' , 'FAILED' , test ), ' ' , label if (. not . test ) total = total + 1 end subroutine checkit","tags":"","url":"proc/checkit.html"},{"title":"M_utf8 – M_time","text":"Functions public  function ucs4_to_utf8 (ucs4_string, err) result(string) Arguments Type Intent Optional Attributes Name character(kind=ucs4, len=*), intent(in) :: ucs4_string integer, intent(out), optional :: err Return Value character(kind=ascii, len=:), allocatable public  function ucs4_to_utf8_via_io (ucs4_string) result(corrected) Arguments Type Intent Optional Attributes Name character(kind=ucs4, len=*), intent(in) :: ucs4_string Return Value character(kind=ascii, len=:), allocatable public  function utf8_to_ucs4 (string) result(corrected) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value character(kind=ucs4, len=:), allocatable public  function utf8_to_ucs4_via_io (string) result(corrected) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value character(kind=ucs4, len=:), allocatable Subroutines public  subroutine utf8_to_codepoints (utf8, out, err) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: utf8 integer, intent(out), allocatable :: out (:) integer, intent(out) :: err","tags":"","url":"module/m_utf8.html"},{"title":"uni_to_ftn – M_time","text":"Uses iso_fortran_env M_utf8 Variables Type Attributes Name Initial character(len=:), allocatable :: aline character(len=:), allocatable :: command_line character(len=*), parameter :: form = '(\"char(int(z''\",z0,\"''),kind=ucs4)\":,\"// &\")' character(len=*), parameter :: g = '(*(g0))' integer :: i integer :: length integer, parameter :: ucs4 = selected_char_kind('ISO_10646') character(kind=ucs4, len=:), allocatable :: ustr Source Code program uni_to_ftn ! take command line argument utf-8 text and generate Fortran statement that represents the string use , intrinsic :: iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) character ( len =* ), parameter :: form = '(\"char(int(z''\",z0,\"''),kind=ucs4)\":,\"// &\")' character ( len =* ), parameter :: g = '(*(g0))' integer :: length integer :: i character ( len = :), allocatable :: aline character ( len = :), allocatable :: command_line character ( len = :, kind = ucs4 ), allocatable :: ustr open ( output_unit , encoding = 'UTF-8' ) call get_command ( length = length ) ! get command line length allocate ( character ( len = length ) :: command_line ) ! allocate string big enough to hold command line call get_command ( command = command_line ) ! get command line as a string call get_command_argument ( 0 , length = length ) ! remove argument 0 command_line = adjustl ( command_line ( length + 1 :)) ustr = utf8_to_ucs4 ( command_line ) write ( * , g ) 'program testit' write ( * , g ) 'use, intrinsic :: iso_fortran_env, only : output_unit' write ( * , g ) \"integer, parameter :: ucs4 = selected_char_kind ('ISO_10646')\" write ( * , g ) '! OUTPUT:' , command_line write ( * , g ) 'character(len=*,kind=ucs4),parameter :: variable= &' write ( * , form )( ustr ( i : i ), i = 1 , len ( ustr )) write ( * , g ) \"   open (output_unit, encoding='utf-8')\" write ( * , g ) \"   write(output_unit,'(a)' )variable\" write ( * , g ) \"end program testit\" end program uni_to_ftn","tags":"","url":"program/uni_to_ftn.html"},{"title":"testit – M_time","text":"Uses iso_fortran_env M_utf8 Variables Type Attributes Name Initial character(len=:), allocatable :: astr integer :: err integer, parameter :: ucs4 = selected_char_kind(\"ISO_10646\") character(kind=ucs4, len=:), allocatable :: ustr Source Code program testit use iso_fortran_env , only : stdout => output_unit use M_utf8 , only : ucs4_to_utf8 implicit none integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = :, kind = ucs4 ), allocatable :: ustr character ( len = :), allocatable :: astr integer :: err open ( stdout , encoding = 'UTF-8' ) ! standard method ustr = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) write ( stdout , * ) ustr write ( stdout , * ) merge ( 'PASSED' , 'FAILED' , storage_size ( ustr ) /= storage_size ( 'Hello World and Ni Hao -- 你好' ) ) astr = ucs4_to_utf8 ( ustr , err ) write ( stdout , * ) merge ( 'PASSED' , 'FAILED' , astr == 'Hello World and Ni Hao -- 你好' ) write ( stdout , * ) ustr write ( stdout , * ) astr end program testit","tags":"","url":"program/testit.html"},{"title":"multi_line – M_time","text":"Uses iso_fortran_env M_utf8 Variables Type Attributes Name Initial integer, parameter :: ascii = selected_char_kind(\"ascii\") integer :: i integer :: j character(kind=ucs4, len=3) :: line integer :: longest integer, parameter :: ucs4 = selected_char_kind(\"ISO_10646\") character(len=255), parameter :: upagain (3) = [character(len=255)::\"七転び八起き。\", \"転んでもまた立ち上がる。\", \"くじけずに前を向いて歩いていこう。\"] character(kind=ucs4, len=4) :: ustr (size(upagain)) Source Code program multi_line use iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 implicit none integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) integer :: i , j , longest character ( len = 3 , kind = ucs4 ) :: line character ( len = 255 ), parameter :: upagain ( 3 ) = [ character ( len = 255 ) :: & \"七転び八起き。\" , & \"転んでもまた立ち上がる。\" , & \"くじけずに前を向いて歩いていこう。\" ] ! ! Romanization: ! Nanakorobi yaoki. Koronde mo mata tachiagaru. Kujikezu ni mae o muite aruite ikou. ! or English translation ! \"Fall seven times, stand up eight. Even if you fall down, you will get up again. Don't be discouraged, just keep walking forward.\" ! character ( len = 4 * len ( upagain ), kind = ucs4 ) :: ustr ( size ( upagain )) open ( output_unit , encoding = 'UTF-8' ) ! convert pseudo-utf-8 ascii to actual Fortran ucs4 unicode longest = 0 ! get longest trimmed line do i = 1 , size ( upagain ) ustr ( i ) = utf8_to_ucs4 ( upagain ( i )) longest = max ( longest , len_trim ( ustr ( i ))) enddo write ( output_unit , * ) write ( output_unit , * ) 'longest=' , longest write ( output_unit , * )( trim ( ustr ( i )), i = 1 , size ( ustr )) write ( output_unit , * ) ! does not work too well if not a fixed-space font, but even when fixed-spaced having problems in mintty anyway, at least do i = 1 , longest ! not lining up write ( output_unit , '(*(A))' ) ( ustr ( j )( i : i ), j = size ( upagain ), 1 , - 1 ) ! numbers for T seems to be for ASCII bytes !write(output_unit,'(T1,A,T5,A,T9,A)') (ustr(j)(i:i),j=1,size(upagain)) !line=ustr(3)(i:i)//ustr(2)(i:i)//ustr(1)(i:i) !write(*,*)line enddo do i = 1 , longest ! not lining up write ( output_unit , '(*(A))' ) ( ustr ( j )( i : i ), j = 1 , size ( upagain )) enddo end program multi_line","tags":"","url":"program/multi_line.html"},{"title":"uni_to_ftn – M_time","text":"Uses iso_fortran_env M_utf8 Variables Type Attributes Name Initial character(len=:), allocatable :: aline character(len=:), allocatable :: command_line character(len=*), parameter :: form = '(\"char(int(z''\",z0,\"''),kind=ucs4)\":,\"// &\")' character(len=*), parameter :: g = '(*(g0))' integer :: i integer :: length integer, parameter :: ucs4 = selected_char_kind('ISO_10646') character(kind=ucs4, len=:), allocatable :: ustr Source Code program uni_to_ftn ! take command line argument utf-8 text and generate Fortran statement that represents the string use , intrinsic :: iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) character ( len =* ), parameter :: form = '(\"char(int(z''\",z0,\"''),kind=ucs4)\":,\"// &\")' character ( len =* ), parameter :: g = '(*(g0))' integer :: length integer :: i character ( len = :), allocatable :: aline character ( len = :), allocatable :: command_line character ( len = :, kind = ucs4 ), allocatable :: ustr open ( output_unit , encoding = 'UTF-8' ) call get_command ( length = length ) ! get command line length allocate ( character ( len = length ) :: command_line ) ! allocate string big enough to hold command line call get_command ( command = command_line ) ! get command line as a string call get_command_argument ( 0 , length = length ) ! remove argument 0 command_line = adjustl ( command_line ( length + 1 :)) ustr = utf8_to_ucs4 ( command_line ) write ( * , g ) 'program testit' write ( * , g ) 'use, intrinsic :: iso_fortran_env, only : output_unit' write ( * , g ) \"integer, parameter :: ucs4 = selected_char_kind ('ISO_10646')\" write ( * , g ) '! OUTPUT:' , command_line write ( * , g ) 'character(len=*,kind=ucs4),parameter :: variable = &' write ( * , form )( ustr ( i : i ), i = 1 , len ( ustr )) write ( * , g ) \"   open (output_unit, encoding='utf-8')\" write ( * , g ) \"   write(output_unit,'(a)' )variable\" write ( * , g ) \"end program testit\" end program uni_to_ftn","tags":"","url":"program/uni_to_ftn~2.html"},{"title":"shouldit – M_time","text":"Uses iso_fortran_env Variables Type Attributes Name Initial character(kind=ascii, len=*), parameter :: A = 'ľščťžýáßĄĘ®™√🙂' character(kind=ascii, len=512) :: ALINE character(kind=ucs4, len=*), parameter :: B = char(int(z'13E'), kind=ucs4)//char(int(z'161'), kind=ucs4)//char(int(z'10D'), kind=ucs4)//char(int(z'165'), kind=ucs4)//char(int(z'17E'), kind=ucs4)//char(int(z'FD'), kind=ucs4)//char(int(z'E1'), kind=ucs4)//char(int(z'DF'), kind=ucs4)//char(int(z'104'), kind=ucs4)//char(int(z'118'), kind=ucs4)//char(int(z'AE'), kind=ucs4)//char(int(z'2122'), kind=ucs4)//char(int(z'221A'), kind=ucs4)//char(int(z'1F642'), kind=ucs4) character(kind=ucs4, len=512) :: ULINE integer, parameter :: ascii = selected_char_kind('ASCII') integer, parameter :: ucs4 = selected_char_kind('ISO_10646') Source Code program shouldit use iso_fortran_env , only : output_unit , int64 implicit none intrinsic selected_char_kind integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) integer , parameter :: ascii = selected_char_kind ( 'ASCII' ) ! can something in quotes only be encoded as ASCII? !NO!character(len=*,kind=ucs4),parameter :: A=ucs4_'ľščťžýáßĄĘ®™√🙂' !NO!character(len=*,kind=ucs4),parameter :: A='ľščťžýáßĄĘ®™√🙂' character ( len =* , kind = ascii ), parameter :: A = 'ľščťžýáßĄĘ®™√🙂' character ( len = 512 , kind = ucs4 ) :: ULINE character ( len = 512 , kind = ascii ) :: ALINE character ( len =* , kind = ucs4 ), parameter :: B = & char ( int ( z '13E' ), kind = ucs4 ) // & char ( int ( z '161' ), kind = ucs4 ) // & char ( int ( z '10D' ), kind = ucs4 ) // & char ( int ( z '165' ), kind = ucs4 ) // & char ( int ( z '17E' ), kind = ucs4 ) // & char ( int ( z 'FD' ), kind = ucs4 ) // & char ( int ( z 'E1' ), kind = ucs4 ) // & char ( int ( z 'DF' ), kind = ucs4 ) // & char ( int ( z '104' ), kind = ucs4 ) // & char ( int ( z '118' ), kind = ucs4 ) // & char ( int ( z 'AE' ), kind = ucs4 ) // & char ( int ( z '2122' ), kind = ucs4 ) // & char ( int ( z '221A' ), kind = ucs4 ) // & char ( int ( z '1F642' ), kind = ucs4 ) !character(len=1,kind=ucs4),parameter :: C(*)=& !char(int([z'13E',z'161',z'10D',z'165',z'17E',z'FD',z'E1',z'DF',z'104',z'118',z'AE',z'2122',z'221A',z'1F642']),kind=ucs4) open ( output_unit , encoding = 'UTF-8' ) write ( * , * ) 'this is not really UTF-8, it a stream of bytes that has the right values' write ( * , * ) A , len ( A ), storage_size ( A ), A ( 10 : 14 ) write ( * , * ) 'Fortran actually understands this, so slice and intrinsics work correctly' write ( * , * ) B , len ( B ), storage_size ( B ), B ( 10 : 14 ) write ( * , * ) 'The data between the quotes is ASCII so this does not work' write ( * , * ) ucs4_ 'ľ' , ucs4_ 'š' , ucs4_ 'č' , ucs4_ 'ť' , ucs4_ 'ž' , & ucs4_ 'ý' , ucs4_ 'á' , ucs4_ 'ß' , ucs4_ 'Ą' , ucs4_ 'Ę' , & ucs4_ '®' , ucs4_ '™' , ucs4_ '√' , ucs4_ '🙂' write ( * , * ) 'might work but not defined by the standard that I can tell' write ( ULINE , '(A)' ) A write ( * , * ) 'ULINE:' , trim ( ULINE ) write ( * , * ) 'A:' , A write ( * , * ) 'might work but not defined by the standard that I can tell' write ( ALINE , '(A)' ) A write ( * , * ) 'ALINE:' , trim ( ALINE ) write ( * , * ) 'biggest code:' write ( * , * ) 'FFFFFFFF:' , int ( z 'FFFFFFFF' , kind = int64 ) end program shouldit","tags":"","url":"program/shouldit.html"},{"title":"demo_selected_char_kind – M_time","text":"Uses iso_fortran_env Variables Type Attributes Name Initial character(kind=ascii, len=26) :: alphabet integer, parameter :: ascii = selected_char_kind(\"ascii\") character(kind=ucs4, len=:), allocatable :: corrected integer, parameter :: default = selected_char_kind(\"default\") character(kind=ucs4, len=30) :: hello_world integer :: i character(len=*), parameter :: not_ascii = \"ľščťžýáßĄĘ®™√🙂\" character(kind=ucs4, len=30) :: string integer, parameter :: ucs4 = selected_char_kind('ISO_10646') integer, parameter :: utf8 = selected_char_kind('utf-8') Functions function utf8_to_utf32 (string) result(corrected) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value character(kind=ucs4, len=:), allocatable Subroutines subroutine create_date_string (string) Arguments Type Intent Optional Attributes Name character(kind=ucs4, len=*) :: string Source Code program demo_selected_char_kind use iso_fortran_env implicit none intrinsic date_and_time , selected_char_kind ! set some aliases for common character kinds ! as the numbers can vary from platform to platform integer , parameter :: default = selected_char_kind ( \"default\" ) integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) integer , parameter :: utf8 = selected_char_kind ( 'utf-8' ) ! assuming ASCII and UCS4 are supported (ie. not equal to -1) ! define some string variables character ( len = 26 , kind = ascii ) :: alphabet character ( len = 30 , kind = ucs4 ) :: hello_world character ( len = 30 , kind = ucs4 ) :: string character ( len =* ), parameter :: not_ascii = \"ľščťžýáßĄĘ®™√🙂\" character ( len = :, kind = ucs4 ), allocatable :: corrected integer :: i write ( * , * ) 'ASCII     ' ,& & merge ( 'Supported    ' , 'Not Supported' , ascii /= - 1 ) write ( * , * ) 'ISO_10646 ' ,& & merge ( 'Supported    ' , 'Not Supported' , ucs4 /= - 1 ) write ( * , * ) 'UTF-8     ' ,& & merge ( 'Supported    ' , 'Not Supported' , utf8 /= - 1 ) if ( default . eq . ascii ) then write ( * , * ) 'ASCII is the default on this processor' endif ! for constants the kind precedes the value, somewhat like a ! BOZ constant alphabet = ascii_ \"abcdefghijklmnopqrstuvwxyz\" write ( * , * ) alphabet hello_world = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) ! an encoding option is required on OPEN for non-default I/O if ( ucs4 /= - 1 ) then open ( output_unit , encoding = 'UTF-8' ) write ( * , * ) trim ( hello_world ) else write ( * , * ) 'cannot use utf-8' endif call create_date_string ( string ) write ( * , * ) trim ( string ) write ( * , * ) 'NOT_ASCII:' , not_ascii write ( * , * ) 'LEN NOT_ASCII:' , len ( not_ascii ) write ( * , * ) 'STORAGE_SIZE:' , storage_size ( not_ascii ) corrected = utf8_to_utf32 ( not_ascii ) write ( * , * ) 'CORRECTED:' , corrected write ( * , * ) 'LEN CORRECTED:' , len ( corrected ) write ( * , * ) 'STORAGE_SIZE:' , storage_size ( corrected ) do i = 1 , len ( corrected ) write ( * , '(\"z''\",z0,\"''\")' ) corrected ( i : i ) enddo contains ! The following produces a Japanese date stamp. subroutine create_date_string ( string ) intrinsic date_and_time , selected_char_kind integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = 1 , kind = ucs4 ), parameter :: & nen = char ( int ( z '5e74' ), ucs4 ), & ! year gatsu = char ( int ( z '6708' ), ucs4 ), & ! month nichi = char ( int ( z '65e5' ), ucs4 ) ! day character ( len = * , kind = ucs4 ) string integer values ( 8 ) call date_and_time ( values = values ) write ( string , 101 ) values ( 1 ), nen , values ( 2 ), gatsu , values ( 3 ), nichi 101 format ( * ( i0 , a )) end subroutine create_date_string function utf8_to_utf32 ( string ) result ( corrected ) character ( len =* ), intent ( in ) :: string character ( len = :, kind = ucs4 ), allocatable :: corrected character ( len = 255 , kind = ucs4 ) :: line integer :: lun open ( newunit = lun , encoding = 'UTF-8' , status = 'scratch' ) write ( lun , '(A)' ) string rewind ( lun ) read ( lun , '(A)' ) line close ( lun ) corrected = trim ( line ) open ( output_unit , encoding = 'UTF-8' ) end function utf8_to_utf32 end program demo_selected_char_kind","tags":"","url":"program/demo_selected_char_kind.html"},{"title":"testit – M_time","text":"Uses iso_fortran_env M_utf8 Variables Type Attributes Name Initial character(kind=ascii, len=:), allocatable :: aline character(len=*), parameter :: all = '(*(g0))' integer, parameter :: ascii = selected_char_kind(\"ascii\") character(kind=ucs4, len=1) :: glyph integer :: i character(kind=ucs4, len=:), allocatable :: str integer, parameter :: ucs4 = selected_char_kind(\"ISO_10646\") character(kind=ucs4, len=:), allocatable :: uline Source Code program testit use iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 , ucs4_to_utf8_via_io , utf8_to_ucs4_via_io implicit none integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = :, kind = ucs4 ), allocatable :: str character ( len = 1 , kind = ucs4 ) :: glyph character ( len =* ), parameter :: all = '(*(g0))' character ( len = :, kind = ascii ), allocatable :: aline character ( len = :, kind = ucs4 ), allocatable :: uline integer :: i open ( output_unit , encoding = 'UTF-8' ) ! standard method str = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) write ( * , * ) str ! converting pseudo-utf8 to ucs4 str = utf8_to_ucs4 ( 'Hello World and Ni Hao -- 你好' ) write ( * , * ) str print all print all , 'intrinsics work with ucs4:' print all , 'slice glyph 27:' , str ( 27 : 27 ) print all , 'length        :' , len ( str ) print all , 'bytes         :' , storage_size ( str ) / 8 glyph = str ( 27 : 27 ) print all , 'index         :' , index ( str , glyph ) write ( * , '(a,i0,\",z''\",z0,\"''\")' ) 'ichar         :' , ichar ( glyph ), glyph glyph = char ( int ( z '597D' ), kind = ucs4 ) print all , 'char          :' , glyph print all , 'repeat        :' , repeat ( str ( 27 : 28 ), 3 ) ! SHOULD WRITE INTO ASCII CREATE RAW UTF8 OR WHAT? print all print all , 'internal write into ascii' aline = repeat ( ' ' , len ( str ) * 4 ) write ( aline , all ) str aline = trim ( aline ) print all , 'length        :' , len ( aline ) print all , 'bytes         :' , storage_size ( aline ) / 8 print all , aline ! SHOULD WRITE INTO UCS4 DO ANYTHING DIFFERENT? print all print all , 'internal write into ucs4' uline = repeat ( ' ' , len ( str )) write ( uline , all ) str uline = trim ( uline ) print all , 'length        :' , len ( uline ) print all , 'bytes         :' , storage_size ( uline ) / 8 print all , uline print all print all , 'raw utf8' print all , 'length        :' , len ( 'Hello World and Ni Hao -- 你好' ) print all , 'bytes         :' , storage_size ( 'Hello World and Ni Hao -- 你好' ) / 8 ! WHAT SHOULD ASSIGN DO? print all print all , 'assign' aline = uline print all , 'length        :' , len ( aline ) print all , 'bytes         :' , storage_size ( aline ) / 8 print all , aline print all print all , 'to be or not to be' ! Ikiru ka shinu ka ! \"to live or die\" str = utf8_to_ucs4 ( '生きるか死ぬか' ) print all , 'ucs4 string:' , str print all , 'reverse:    ' ,( str ( i : i ), i = len ( str ), 1 , - 1 ) print all print all , 'ucs4 to utf8' str = utf8_to_ucs4_via_io ( '生きるか死ぬか' ) aline = ucs4_to_utf8_via_io ( str ) print all , merge ( 'PASSED' , 'FAILED' , aline == '生きるか死ぬか' ) end program testit","tags":"","url":"program/testit~2.html"},{"title":"test_utf8 – M_time","text":"Uses iso_fortran_env M_utf8 Variables Type Attributes Name Initial integer, allocatable :: codepoints (:) character(kind=ucs4, len=:), allocatable :: corrected integer :: err integer :: i character(kind=ucs4, len=1) :: letter character(len=*), parameter :: not_ascii = \"ľščťžýáßĄĘ®™√🙂\" character(len=100) :: s integer, parameter :: ucs4 = selected_char_kind('ISO_10646')","tags":"","url":"program/test_utf8.html"},{"title":"check – M_time","text":"Uses iso_fortran_env M_utf8 Variables Type Attributes Name Initial integer, parameter :: ascii = selected_char_kind(\"ascii\") character(len=:), allocatable :: astr integer :: err character(kind=ucs4, len=1) :: stop integer :: total integer, parameter :: ucs4 = selected_char_kind('ISO_10646') character(len=*), parameter :: upagain = \"七転び八起き。転んでもまた立ち上がる。くじけずに前を向いて歩いていこう。\" character(kind=ucs4, len=:), allocatable :: ustr Subroutines subroutine checkit (label, test) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: label logical, intent(in) :: test Source Code program check use iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_codepoints , utf8_to_ucs4 , ucs4_to_utf8 , utf8_to_ucs4_via_io , ucs4_to_utf8_via_io implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) ! character ( len =* ), parameter :: upagain = \"七転び八起き。転んでもまた立ち上がる。くじけずに前を向いて歩いていこう。\" ! Romanization: ! Nanakorobi yaoki. Koronde mo mata tachiagaru. Kujikezu ni mae o muite aruite ikou. ! or English translation ! \"Fall seven times, stand up eight. Even if you fall down, you will get up again. Don't be discouraged, just keep walking forward.\" ! character ( len = 1 , kind = ucs4 ) :: stop character ( len = :, kind = ucs4 ), allocatable :: ustr character ( len = :), allocatable :: astr integer :: total integer :: err total = 0 ustr = utf8_to_ucs4 ( upagain ) write ( * , * ) 'if file is not open for utf-8 encoding automatic conversion does not occur' write ( * , * ) 'utf8:' , upagain write ( * , * ) 'ucs4:' , ustr write ( * , * ) write ( * , * ) 'encoding can be altered on an open file' open ( output_unit , encoding = 'UTF-8' ) write ( * , * ) 'utf8:' , upagain write ( * , * ) 'ucs4:' , ustr write ( * , * ) stop = ustr ( 7 : 7 ) call checkit ( 'check len() is 36 :' , len ( ustr ) == 36 ) call checkit ( 'check index       :' , index ( ustr , stop , kind = ucs4 , back = . false .) == 7 ) call checkit ( 'check index       :' , index ( ustr , stop , back = . true ., kind = ucs4 ) == len ( ustr ) ) call checkit ( 'storage_size      :' , storage_size ( ustr ) == len ( ustr ) * 4 * 8 ) ! standard method. Note ASCII one-byte characters become 4-byte characters, but multi-byte characters are not recognized ustr = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) astr = ucs4_to_utf8 ( ustr , err ) call checkit ( 'convert to ascii bytes representing utf8' , astr == 'Hello World and Ni Hao -- 你好' ) if ( total . ne . 0 ) then write ( * , * ) total , 'failures' stop 1 endif contains subroutine checkit ( label , test ) character ( len =* ), intent ( in ) :: label logical , intent ( in ) :: test write ( * , * ) merge ( 'PASSED' , 'FAILED' , test ), ' ' , label if (. not . test ) total = total + 1 end subroutine checkit end program check","tags":"","url":"program/check.html"},{"title":"main.f90 – M_time","text":"Source Code program uni_to_ftn ! take command line argument utf-8 text and generate Fortran statement that represents the string use , intrinsic :: iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) character ( len =* ), parameter :: form = '(\"char(int(z''\",z0,\"''),kind=ucs4)\":,\"// &\")' character ( len =* ), parameter :: g = '(*(g0))' integer :: length integer :: i character ( len = :), allocatable :: aline character ( len = :), allocatable :: command_line character ( len = :, kind = ucs4 ), allocatable :: ustr open ( output_unit , encoding = 'UTF-8' ) call get_command ( length = length ) ! get command line length allocate ( character ( len = length ) :: command_line ) ! allocate string big enough to hold command line call get_command ( command = command_line ) ! get command line as a string call get_command_argument ( 0 , length = length ) ! remove argument 0 command_line = adjustl ( command_line ( length + 1 :)) ustr = utf8_to_ucs4 ( command_line ) write ( * , g ) 'program testit' write ( * , g ) 'use, intrinsic :: iso_fortran_env, only : output_unit' write ( * , g ) \"integer, parameter :: ucs4 = selected_char_kind ('ISO_10646')\" write ( * , g ) '! OUTPUT:' , command_line write ( * , g ) 'character(len=*,kind=ucs4),parameter :: variable= &' write ( * , form )( ustr ( i : i ), i = 1 , len ( ustr )) write ( * , g ) \"   open (output_unit, encoding='utf-8')\" write ( * , g ) \"   write(output_unit,'(a)' )variable\" write ( * , g ) \"end program testit\" end program uni_to_ftn","tags":"","url":"sourcefile/main.f90.html"},{"title":"utf8_to_ucs4.f90 – M_time","text":"Source Code program testit use iso_fortran_env , only : stdout => output_unit use M_utf8 , only : ucs4_to_utf8 implicit none integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = :, kind = ucs4 ), allocatable :: ustr character ( len = :), allocatable :: astr integer :: err open ( stdout , encoding = 'UTF-8' ) ! standard method ustr = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) write ( stdout , * ) ustr write ( stdout , * ) merge ( 'PASSED' , 'FAILED' , storage_size ( ustr ) /= storage_size ( 'Hello World and Ni Hao -- 你好' ) ) astr = ucs4_to_utf8 ( ustr , err ) write ( stdout , * ) merge ( 'PASSED' , 'FAILED' , astr == 'Hello World and Ni Hao -- 你好' ) write ( stdout , * ) ustr write ( stdout , * ) astr end program testit","tags":"","url":"sourcefile/utf8_to_ucs4.f90.html"},{"title":"M_utf8.f90 – M_time","text":"Source Code module M_utf8 implicit none private public :: utf8_to_codepoints public :: utf8_to_ucs4 public :: ucs4_to_utf8 public :: utf8_to_ucs4_via_io public :: ucs4_to_utf8_via_io integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) contains subroutine utf8_to_codepoints ( utf8 , out , err ) character ( len =* ), intent ( in ) :: utf8 integer , allocatable , intent ( out ) :: out (:) ! Unicode code points integer , intent ( out ) :: err integer :: n_out integer :: i , len8 , b1 , b2 , b3 , b4 integer :: cp , nbytes integer :: temp ( 4 * len ( utf8 )) ! big enough to hold all of utf8 if each single byte required four err = 0 len8 = len_trim ( utf8 ) i = 1 n_out = 0 do while ( i <= len8 ) b1 = iachar ( utf8 ( i : i )) if ( b1 < 0 ) b1 = b1 + 256 select case ( b1 ) case ( 0 : 127 ) cp = b1 nbytes = 1 case ( 192 : 223 ) if ( i + 1 > len8 ) then ; err = 1 ; return ; endif b2 = iachar ( utf8 ( i + 1 : i + 1 )); if ( b2 < 0 ) b2 = b2 + 256 if ( iand ( b2 , 192 ) /= 128 ) then ; err = 2 ; return ; endif cp = iand ( b1 , 31 ) cp = ishft ( cp , 6 ) + iand ( b2 , 63 ) nbytes = 2 case ( 224 : 239 ) if ( i + 2 > len8 ) then ; err = 1 ; return ; endif b2 = iachar ( utf8 ( i + 1 : i + 1 )); if ( b2 < 0 ) b2 = b2 + 256 b3 = iachar ( utf8 ( i + 2 : i + 2 )); if ( b3 < 0 ) b3 = b3 + 256 if ( iand ( b2 , 192 ) /= 128 . or . iand ( b3 , 192 ) /= 128 ) then ; err = 2 ; return ; endif cp = iand ( b1 , 15 ) cp = ishft ( cp , 6 ) + iand ( b2 , 63 ) cp = ishft ( cp , 6 ) + iand ( b3 , 63 ) nbytes = 3 case ( 240 : 247 ) if ( i + 3 > len8 ) then ; err = 1 ; return ; endif b2 = iachar ( utf8 ( i + 1 : i + 1 )); if ( b2 < 0 ) b2 = b2 + 256 b3 = iachar ( utf8 ( i + 2 : i + 2 )); if ( b3 < 0 ) b3 = b3 + 256 b4 = iachar ( utf8 ( i + 3 : i + 3 )); if ( b4 < 0 ) b4 = b4 + 256 if ( iand ( b2 , 192 ) /= 128 . or . iand ( b3 , 192 ) /= 128 . or . iand ( b4 , 192 ) /= 128 ) then err = 2 ; return endif cp = iand ( b1 , 7 ) cp = ishft ( cp , 6 ) + iand ( b2 , 63 ) cp = ishft ( cp , 6 ) + iand ( b3 , 63 ) cp = ishft ( cp , 6 ) + iand ( b4 , 63 ) nbytes = 4 case default err = 3 return end select if ( n_out >= size ( temp )) then err = 4 return endif n_out = n_out + 1 temp ( n_out ) = cp i = i + nbytes enddo allocate ( out ( n_out )) out = temp ( 1 : n_out ) end subroutine utf8_to_codepoints function utf8_to_ucs4_via_io ( string ) result ( corrected ) character ( len =* ), intent ( in ) :: string character ( len = :, kind = ucs4 ), allocatable :: corrected character ( len = ( len ( string )), kind = ucs4 ) :: line integer :: lun open ( newunit = lun , encoding = 'UTF-8' , status = 'scratch' ) write ( lun , '(A)' ) string rewind ( lun ) read ( lun , '(A)' ) line close ( lun ) corrected = trim ( line ) end function utf8_to_ucs4_via_io function ucs4_to_utf8_via_io ( ucs4_string ) result ( corrected ) character ( len =* , kind = ucs4 ), intent ( in ) :: ucs4_string character ( len = :, kind = ascii ), allocatable :: corrected character ( len = ( len ( ucs4_string ) * 4 ), kind = ascii ) :: line integer :: lun open ( newunit = lun , encoding = 'UTF-8' , status = 'scratch' ) write ( lun , '(A)' ) ucs4_string rewind ( lun ) open ( unit = lun , encoding = 'default' ) read ( lun , '(A)' ) line close ( lun ) corrected = trim ( line ) end function ucs4_to_utf8_via_io function utf8_to_ucs4 ( string ) result ( corrected ) ! return a string of kind ucs4 character ( len =* ), intent ( in ) :: string character ( len = :, kind = ucs4 ), allocatable :: corrected integer , allocatable :: codepoints (:) integer :: i , n integer :: err call utf8_to_codepoints ( string , codepoints , err ) n = size ( codepoints ) allocate ( character ( len = n , kind = ucs4 ) :: corrected ) do i = 1 , n corrected ( i : i ) = char ( codepoints ( i ), kind = ucs4 ) enddo end function utf8_to_ucs4 function ucs4_to_utf8 ( ucs4_string , err ) result ( string ) ! ! converting UCS-4 (representing Unicode code points) to UTF-8 ! internally without using I/O directly requires manual implementation of ! the UTF-8 encoding rules because there's no direct intrinsic function ! for this conversion. ! !    UTF-8 is a variable-width encoding that uses 1 to 4 bytes to represent !    Unicode characters. ! !    The number of bytes depends on the value of the Unicode code point: !        0x0000 - 0x007F (ASCII): 1 byte (0xxxxxxx). !        0x0080 - 0x07FF: 2 bytes (110xxxxx 10xxxxxx). !        0x0800 - 0xFFFF (Basic Multilingual Plane): 3 bytes (1110xxxx 10xxxxxx 10xxxxxx). !        0x10000 - 0x10FFFF (Supplementary Planes): 4 bytes (11110xxx 10xxxxxx 10xxxxxx 10xxxxxx). ! !    Continuation bytes in multi-byte sequences always start with the !    bit pattern 10xxxxxx. ! ! Representing UCS-4 in Fortran ! !    Use the selected_char_kind('ISO_10646') intrinsic to define a kind !    for UCS-4 characters. ! !    You can declare character variables with this kind, e.g., !    character(kind=ucs4, len=<length>) :: my_ucs4_string. ! !    Individual Unicode code points can be represented using hexadecimal !    constants and the char function with the specified kind. For example, !    char(int(z'4F60'), ucs4) represents the Chinese character '你' (Ni). ! ! Conversion Algorithm (Conceptual Example) ! ! You iterate through the UCS-4 string (conceptually treating each ! character as a 4-byte integer) and apply the UTF-8 encoding rules based ! on the code point's value. You then build a new byte array or ! a character string with character(len=1) elements, representing the ! UTF-8 sequence. ! !    The Unicode standard doesn't require a BOM for UTF-8, but it may be !    encountered at the start of files. This internal conversion doesn't !    add a BOM. ! !    The example doesn't explicitly handle surrogate pairs, which are !    used in UTF-16 to represent characters outside the Basic Multilingual !    Plane. Since UCS-4 already directly represents code points, surrogates !    are not a direct concern for UCS-4 to UTF-8 conversion, but it's !    good to be aware of them when dealing with other Unicode encodings. ! use iso_fortran_env , only : error_unit implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) ! The compiler must support UCS-4 characters integer , parameter :: ascii = selected_char_kind ( 'ascii' ) ! maybe should use default, as ASCII is technically 128, not 256 chars character ( len =* , kind = ucs4 ), intent ( in ) :: ucs4_string ! stores the UCS-4 string. integer , intent ( out ), optional :: err character ( len = :, kind = ascii ), allocatable :: string ! utf8_bytes stores the resulting UTF-8 byte sequence. It's declared ! with kind=ascii and a length determined by the maximum possible ! bytes for the UCS-4 string length (each UCS-4 character can be up ! to 4 bytes in UTF-8). character ( len = len ( ucs4_string ) * 4 ) :: utf8_bytes ! Max 4 bytes per UCS-4 char integer :: i , j , code_point integer :: num_bytes , utf8_index integer , dimension ( 4 ) :: utf8_code utf8_index = 1 if ( present ( err )) err = 0 do i = 1 , len ( ucs4_string ) ! iterate through each UCS-4 character. code_point = iachar ( ucs4_string ( i : i ), kind = ucs4 ) ! Get the integer value of the UCS-4 char ! The if/else if statements check the code point value and determine ! the number of bytes required for UTF-8 encoding. ! ! Bitwise operations (ior, ishft, iand) are used to construct the ! individual UTF-8 bytes according to the standard rules. ! if ( code_point < int ( z '80' ) ) then ! 1-byte UTF-8 (ASCII) num_bytes = 1 utf8_code ( 1 ) = code_point else if ( code_point < int ( z '800' ) ) then ! 2-byte UTF-8 num_bytes = 2 utf8_code ( 1 ) = ior ( z 'C0' , ishft ( code_point , - 6 )) utf8_code ( 2 ) = ior ( z '80' , iand ( code_point , z '3F' )) else if ( code_point < int ( z '10000' ) ) then ! 3-byte UTF-8 num_bytes = 3 utf8_code ( 1 ) = ior ( z 'E0' , ishft ( code_point , - 12 )) utf8_code ( 2 ) = ior ( z '80' , iand ( ishft ( code_point , - 6 ), z '3F' )) utf8_code ( 3 ) = ior ( z '80' , iand ( code_point , z '3F' )) else if ( code_point < int ( z '110000' ) ) then ! 4-byte UTF-8 num_bytes = 4 utf8_code ( 1 ) = ior ( z 'F0' , ishft ( code_point , - 18 )) utf8_code ( 2 ) = ior ( z '80' , iand ( ishft ( code_point , - 12 ), z '3F' )) utf8_code ( 3 ) = ior ( z '80' , iand ( ishft ( code_point , - 6 ), z '3F' )) utf8_code ( 4 ) = ior ( z '80' , iand ( code_point , z '3F' )) else ! Handle invalid code points or error conditions as needed write ( error_unit , * ) \"Error: Invalid Unicode code point:\" , code_point if (. not . present ( err )) stop 1 err = err + 1 cycle endif ! Append the UTF-8 bytes to the utf8_bytes string do j = 1 , num_bytes ! The utf8_bytes string is built byte by byte using char with kind=ascii. utf8_bytes ( utf8_index : utf8_index ) = char ( utf8_code ( j ), kind = ascii ) utf8_index = utf8_index + 1 enddo enddo string = trim ( utf8_bytes ( 1 : utf8_index - 1 )) ! the UTF-8 byte sequence end function ucs4_to_utf8 end module M_utf8","tags":"","url":"sourcefile/m_utf8.f90.html"},{"title":"multi_line.f90 – M_time","text":"Source Code program multi_line use iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 implicit none integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) integer :: i , j , longest character ( len = 3 , kind = ucs4 ) :: line character ( len = 255 ), parameter :: upagain ( 3 ) = [ character ( len = 255 ) :: & \"七転び八起き。\" , & \"転んでもまた立ち上がる。\" , & \"くじけずに前を向いて歩いていこう。\" ] ! ! Romanization: ! Nanakorobi yaoki. Koronde mo mata tachiagaru. Kujikezu ni mae o muite aruite ikou. ! or English translation ! \"Fall seven times, stand up eight. Even if you fall down, you will get up again. Don't be discouraged, just keep walking forward.\" ! character ( len = 4 * len ( upagain ), kind = ucs4 ) :: ustr ( size ( upagain )) open ( output_unit , encoding = 'UTF-8' ) ! convert pseudo-utf-8 ascii to actual Fortran ucs4 unicode longest = 0 ! get longest trimmed line do i = 1 , size ( upagain ) ustr ( i ) = utf8_to_ucs4 ( upagain ( i )) longest = max ( longest , len_trim ( ustr ( i ))) enddo write ( output_unit , * ) write ( output_unit , * ) 'longest=' , longest write ( output_unit , * )( trim ( ustr ( i )), i = 1 , size ( ustr )) write ( output_unit , * ) ! does not work too well if not a fixed-space font, but even when fixed-spaced having problems in mintty anyway, at least do i = 1 , longest ! not lining up write ( output_unit , '(*(A))' ) ( ustr ( j )( i : i ), j = size ( upagain ), 1 , - 1 ) ! numbers for T seems to be for ASCII bytes !write(output_unit,'(T1,A,T5,A,T9,A)') (ustr(j)(i:i),j=1,size(upagain)) !line=ustr(3)(i:i)//ustr(2)(i:i)//ustr(1)(i:i) !write(*,*)line enddo do i = 1 , longest ! not lining up write ( output_unit , '(*(A))' ) ( ustr ( j )( i : i ), j = 1 , size ( upagain )) enddo end program multi_line","tags":"","url":"sourcefile/multi_line.f90.html"},{"title":"uni_to_ftn.f90 – M_time","text":"Source Code program uni_to_ftn ! take command line argument utf-8 text and generate Fortran statement that represents the string use , intrinsic :: iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) character ( len =* ), parameter :: form = '(\"char(int(z''\",z0,\"''),kind=ucs4)\":,\"// &\")' character ( len =* ), parameter :: g = '(*(g0))' integer :: length integer :: i character ( len = :), allocatable :: aline character ( len = :), allocatable :: command_line character ( len = :, kind = ucs4 ), allocatable :: ustr open ( output_unit , encoding = 'UTF-8' ) call get_command ( length = length ) ! get command line length allocate ( character ( len = length ) :: command_line ) ! allocate string big enough to hold command line call get_command ( command = command_line ) ! get command line as a string call get_command_argument ( 0 , length = length ) ! remove argument 0 command_line = adjustl ( command_line ( length + 1 :)) ustr = utf8_to_ucs4 ( command_line ) write ( * , g ) 'program testit' write ( * , g ) 'use, intrinsic :: iso_fortran_env, only : output_unit' write ( * , g ) \"integer, parameter :: ucs4 = selected_char_kind ('ISO_10646')\" write ( * , g ) '! OUTPUT:' , command_line write ( * , g ) 'character(len=*,kind=ucs4),parameter :: variable = &' write ( * , form )( ustr ( i : i ), i = 1 , len ( ustr )) write ( * , g ) \"   open (output_unit, encoding='utf-8')\" write ( * , g ) \"   write(output_unit,'(a)' )variable\" write ( * , g ) \"end program testit\" end program uni_to_ftn","tags":"","url":"sourcefile/uni_to_ftn.f90.html"},{"title":"question.f90 – M_time","text":"Source Code program shouldit use iso_fortran_env , only : output_unit , int64 implicit none intrinsic selected_char_kind integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) integer , parameter :: ascii = selected_char_kind ( 'ASCII' ) ! can something in quotes only be encoded as ASCII? !NO!character(len=*,kind=ucs4),parameter :: A=ucs4_'ľščťžýáßĄĘ®™√🙂' !NO!character(len=*,kind=ucs4),parameter :: A='ľščťžýáßĄĘ®™√🙂' character ( len =* , kind = ascii ), parameter :: A = 'ľščťžýáßĄĘ®™√🙂' character ( len = 512 , kind = ucs4 ) :: ULINE character ( len = 512 , kind = ascii ) :: ALINE character ( len =* , kind = ucs4 ), parameter :: B = & char ( int ( z '13E' ), kind = ucs4 ) // & char ( int ( z '161' ), kind = ucs4 ) // & char ( int ( z '10D' ), kind = ucs4 ) // & char ( int ( z '165' ), kind = ucs4 ) // & char ( int ( z '17E' ), kind = ucs4 ) // & char ( int ( z 'FD' ), kind = ucs4 ) // & char ( int ( z 'E1' ), kind = ucs4 ) // & char ( int ( z 'DF' ), kind = ucs4 ) // & char ( int ( z '104' ), kind = ucs4 ) // & char ( int ( z '118' ), kind = ucs4 ) // & char ( int ( z 'AE' ), kind = ucs4 ) // & char ( int ( z '2122' ), kind = ucs4 ) // & char ( int ( z '221A' ), kind = ucs4 ) // & char ( int ( z '1F642' ), kind = ucs4 ) !character(len=1,kind=ucs4),parameter :: C(*)=& !char(int([z'13E',z'161',z'10D',z'165',z'17E',z'FD',z'E1',z'DF',z'104',z'118',z'AE',z'2122',z'221A',z'1F642']),kind=ucs4) open ( output_unit , encoding = 'UTF-8' ) write ( * , * ) 'this is not really UTF-8, it a stream of bytes that has the right values' write ( * , * ) A , len ( A ), storage_size ( A ), A ( 10 : 14 ) write ( * , * ) 'Fortran actually understands this, so slice and intrinsics work correctly' write ( * , * ) B , len ( B ), storage_size ( B ), B ( 10 : 14 ) write ( * , * ) 'The data between the quotes is ASCII so this does not work' write ( * , * ) ucs4_ 'ľ' , ucs4_ 'š' , ucs4_ 'č' , ucs4_ 'ť' , ucs4_ 'ž' , & ucs4_ 'ý' , ucs4_ 'á' , ucs4_ 'ß' , ucs4_ 'Ą' , ucs4_ 'Ę' , & ucs4_ '®' , ucs4_ '™' , ucs4_ '√' , ucs4_ '🙂' write ( * , * ) 'might work but not defined by the standard that I can tell' write ( ULINE , '(A)' ) A write ( * , * ) 'ULINE:' , trim ( ULINE ) write ( * , * ) 'A:' , A write ( * , * ) 'might work but not defined by the standard that I can tell' write ( ALINE , '(A)' ) A write ( * , * ) 'ALINE:' , trim ( ALINE ) write ( * , * ) 'biggest code:' write ( * , * ) 'FFFFFFFF:' , int ( z 'FFFFFFFF' , kind = int64 ) end program shouldit","tags":"","url":"sourcefile/question.f90.html"},{"title":"supported.f90 – M_time","text":"Source Code program demo_selected_char_kind use iso_fortran_env implicit none intrinsic date_and_time , selected_char_kind ! set some aliases for common character kinds ! as the numbers can vary from platform to platform integer , parameter :: default = selected_char_kind ( \"default\" ) integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) integer , parameter :: utf8 = selected_char_kind ( 'utf-8' ) ! assuming ASCII and UCS4 are supported (ie. not equal to -1) ! define some string variables character ( len = 26 , kind = ascii ) :: alphabet character ( len = 30 , kind = ucs4 ) :: hello_world character ( len = 30 , kind = ucs4 ) :: string character ( len =* ), parameter :: not_ascii = \"ľščťžýáßĄĘ®™√🙂\" character ( len = :, kind = ucs4 ), allocatable :: corrected integer :: i write ( * , * ) 'ASCII     ' ,& & merge ( 'Supported    ' , 'Not Supported' , ascii /= - 1 ) write ( * , * ) 'ISO_10646 ' ,& & merge ( 'Supported    ' , 'Not Supported' , ucs4 /= - 1 ) write ( * , * ) 'UTF-8     ' ,& & merge ( 'Supported    ' , 'Not Supported' , utf8 /= - 1 ) if ( default . eq . ascii ) then write ( * , * ) 'ASCII is the default on this processor' endif ! for constants the kind precedes the value, somewhat like a ! BOZ constant alphabet = ascii_ \"abcdefghijklmnopqrstuvwxyz\" write ( * , * ) alphabet hello_world = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) ! an encoding option is required on OPEN for non-default I/O if ( ucs4 /= - 1 ) then open ( output_unit , encoding = 'UTF-8' ) write ( * , * ) trim ( hello_world ) else write ( * , * ) 'cannot use utf-8' endif call create_date_string ( string ) write ( * , * ) trim ( string ) write ( * , * ) 'NOT_ASCII:' , not_ascii write ( * , * ) 'LEN NOT_ASCII:' , len ( not_ascii ) write ( * , * ) 'STORAGE_SIZE:' , storage_size ( not_ascii ) corrected = utf8_to_utf32 ( not_ascii ) write ( * , * ) 'CORRECTED:' , corrected write ( * , * ) 'LEN CORRECTED:' , len ( corrected ) write ( * , * ) 'STORAGE_SIZE:' , storage_size ( corrected ) do i = 1 , len ( corrected ) write ( * , '(\"z''\",z0,\"''\")' ) corrected ( i : i ) enddo contains ! The following produces a Japanese date stamp. subroutine create_date_string ( string ) intrinsic date_and_time , selected_char_kind integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = 1 , kind = ucs4 ), parameter :: & nen = char ( int ( z '5e74' ), ucs4 ), & ! year gatsu = char ( int ( z '6708' ), ucs4 ), & ! month nichi = char ( int ( z '65e5' ), ucs4 ) ! day character ( len = * , kind = ucs4 ) string integer values ( 8 ) call date_and_time ( values = values ) write ( string , 101 ) values ( 1 ), nen , values ( 2 ), gatsu , values ( 3 ), nichi 101 format ( * ( i0 , a )) end subroutine create_date_string function utf8_to_utf32 ( string ) result ( corrected ) character ( len =* ), intent ( in ) :: string character ( len = :, kind = ucs4 ), allocatable :: corrected character ( len = 255 , kind = ucs4 ) :: line integer :: lun open ( newunit = lun , encoding = 'UTF-8' , status = 'scratch' ) write ( lun , '(A)' ) string rewind ( lun ) read ( lun , '(A)' ) line close ( lun ) corrected = trim ( line ) open ( output_unit , encoding = 'UTF-8' ) end function utf8_to_utf32 end program demo_selected_char_kind","tags":"","url":"sourcefile/supported.f90.html"},{"title":"hello.f90 – M_time","text":"Source Code program testit use iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 , ucs4_to_utf8_via_io , utf8_to_ucs4_via_io implicit none integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) integer , parameter :: ucs4 = selected_char_kind ( \"ISO_10646\" ) character ( len = :, kind = ucs4 ), allocatable :: str character ( len = 1 , kind = ucs4 ) :: glyph character ( len =* ), parameter :: all = '(*(g0))' character ( len = :, kind = ascii ), allocatable :: aline character ( len = :, kind = ucs4 ), allocatable :: uline integer :: i open ( output_unit , encoding = 'UTF-8' ) ! standard method str = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) write ( * , * ) str ! converting pseudo-utf8 to ucs4 str = utf8_to_ucs4 ( 'Hello World and Ni Hao -- 你好' ) write ( * , * ) str print all print all , 'intrinsics work with ucs4:' print all , 'slice glyph 27:' , str ( 27 : 27 ) print all , 'length        :' , len ( str ) print all , 'bytes         :' , storage_size ( str ) / 8 glyph = str ( 27 : 27 ) print all , 'index         :' , index ( str , glyph ) write ( * , '(a,i0,\",z''\",z0,\"''\")' ) 'ichar         :' , ichar ( glyph ), glyph glyph = char ( int ( z '597D' ), kind = ucs4 ) print all , 'char          :' , glyph print all , 'repeat        :' , repeat ( str ( 27 : 28 ), 3 ) ! SHOULD WRITE INTO ASCII CREATE RAW UTF8 OR WHAT? print all print all , 'internal write into ascii' aline = repeat ( ' ' , len ( str ) * 4 ) write ( aline , all ) str aline = trim ( aline ) print all , 'length        :' , len ( aline ) print all , 'bytes         :' , storage_size ( aline ) / 8 print all , aline ! SHOULD WRITE INTO UCS4 DO ANYTHING DIFFERENT? print all print all , 'internal write into ucs4' uline = repeat ( ' ' , len ( str )) write ( uline , all ) str uline = trim ( uline ) print all , 'length        :' , len ( uline ) print all , 'bytes         :' , storage_size ( uline ) / 8 print all , uline print all print all , 'raw utf8' print all , 'length        :' , len ( 'Hello World and Ni Hao -- 你好' ) print all , 'bytes         :' , storage_size ( 'Hello World and Ni Hao -- 你好' ) / 8 ! WHAT SHOULD ASSIGN DO? print all print all , 'assign' aline = uline print all , 'length        :' , len ( aline ) print all , 'bytes         :' , storage_size ( aline ) / 8 print all , aline print all print all , 'to be or not to be' ! Ikiru ka shinu ka ! \"to live or die\" str = utf8_to_ucs4 ( '生きるか死ぬか' ) print all , 'ucs4 string:' , str print all , 'reverse:    ' ,( str ( i : i ), i = len ( str ), 1 , - 1 ) print all print all , 'ucs4 to utf8' str = utf8_to_ucs4_via_io ( '生きるか死ぬか' ) aline = ucs4_to_utf8_via_io ( str ) print all , merge ( 'PASSED' , 'FAILED' , aline == '生きるか死ぬか' ) end program testit","tags":"","url":"sourcefile/hello.f90.html"},{"title":"codepoints.f90 – M_time","text":"Source Code program test_utf8 use iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_ucs4 , utf8_to_codepoints , utf8_to_ucs4_via_io implicit none character ( len = 100 ) :: s integer , allocatable :: codepoints (:) integer :: i , err intrinsic selected_char_kind integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) character ( len =* ), parameter :: not_ascii = \"ľščťžýáßĄĘ®™√🙂\" character ( len = :, kind = ucs4 ), allocatable :: corrected character ( len = 1 , kind = ucs4 ) :: letter s = \"Héllo 🌍\" ! UTF-8 input string call utf8_to_codepoints ( s , codepoints , err ) if ( err /= 0 ) then print * , \"Decode error:\" , err else print * , \"Code points:\" do i = 1 , size ( codepoints ) write ( * , '(\"U+\",Z8.8)' ) codepoints ( i ) enddo endif !Code points: !U+00000048 !U+000000E9 !U+0000006C !U+0000006C !U+0000006F !U+0001F30D open ( output_unit , encoding = 'UTF-8' ) write ( * , * ) call utf8_to_codepoints ( not_ascii , codepoints , err ) write ( * , * ) 'SIZE:' , size ( codepoints ), merge ( 'PASSED' , 'FAILED' , size ( codepoints ) == 14 ) write ( * , '(*(a))' ) char ( codepoints , kind = ucs4 ) write ( * , '(\"UNICODE NOTATION:\",T20,*(\"U+\",z6.6:,\" \"))' ) codepoints write ( * , '(\"HTML:\",T20,*(\"&#x\",z0,\";\":))' ) codepoints write ( * , '(\"C/PYTHON:\",T20,*(\"\\U\",z8.8:))' ) codepoints write ( * , * ) write ( * , * ) 'properly converted to ucs4' corrected = utf8_to_ucs4 ( not_ascii ) write ( * , * ) 'CORRECTED:' , corrected write ( * , * ) 'LEN CORRECTED:' , len ( corrected ) write ( * , * ) 'STORAGE_SIZE:' , storage_size ( corrected ) write ( * , * ) 'so now slicing, intrinsics, ... work!!' letter = corrected ( 14 : 14 ) write ( * , * ) '14th character' , letter write ( * , * ) 'index position' , index ( corrected , letter ) write ( * , * ) write ( * , * ) 'properly converted to ucs4 via I/O' corrected = utf8_to_ucs4_via_io ( not_ascii ) write ( * , * ) 'CORRECTED:' , corrected write ( * , * ) 'LEN CORRECTED:' , len ( corrected ) write ( * , * ) 'STORAGE_SIZE:' , storage_size ( corrected ) write ( * , * ) 'so now slicing, intrinsics, ... work!!' letter = corrected ( 14 : 14 ) write ( * , * ) '14th character' , letter write ( * , * ) 'index position' , index ( corrected , letter ) write ( * , * ) write ( * , * ) 'variable= &' write ( * , '((\"  char(int(z''\",z0,\"''),kind=ucs4)\",:,\", &\"))' )( corrected ( i : i ), i = 1 , len ( corrected )) end program","tags":"","url":"sourcefile/codepoints.f90.html"},{"title":"check.f90 – M_time","text":"Source Code program check use iso_fortran_env , only : output_unit use M_utf8 , only : utf8_to_codepoints , utf8_to_ucs4 , ucs4_to_utf8 , utf8_to_ucs4_via_io , ucs4_to_utf8_via_io implicit none integer , parameter :: ucs4 = selected_char_kind ( 'ISO_10646' ) integer , parameter :: ascii = selected_char_kind ( \"ascii\" ) ! character ( len =* ), parameter :: upagain = \"七転び八起き。転んでもまた立ち上がる。くじけずに前を向いて歩いていこう。\" ! Romanization: ! Nanakorobi yaoki. Koronde mo mata tachiagaru. Kujikezu ni mae o muite aruite ikou. ! or English translation ! \"Fall seven times, stand up eight. Even if you fall down, you will get up again. Don't be discouraged, just keep walking forward.\" ! character ( len = 1 , kind = ucs4 ) :: stop character ( len = :, kind = ucs4 ), allocatable :: ustr character ( len = :), allocatable :: astr integer :: total integer :: err total = 0 ustr = utf8_to_ucs4 ( upagain ) write ( * , * ) 'if file is not open for utf-8 encoding automatic conversion does not occur' write ( * , * ) 'utf8:' , upagain write ( * , * ) 'ucs4:' , ustr write ( * , * ) write ( * , * ) 'encoding can be altered on an open file' open ( output_unit , encoding = 'UTF-8' ) write ( * , * ) 'utf8:' , upagain write ( * , * ) 'ucs4:' , ustr write ( * , * ) stop = ustr ( 7 : 7 ) call checkit ( 'check len() is 36 :' , len ( ustr ) == 36 ) call checkit ( 'check index       :' , index ( ustr , stop , kind = ucs4 , back = . false .) == 7 ) call checkit ( 'check index       :' , index ( ustr , stop , back = . true ., kind = ucs4 ) == len ( ustr ) ) call checkit ( 'storage_size      :' , storage_size ( ustr ) == len ( ustr ) * 4 * 8 ) ! standard method. Note ASCII one-byte characters become 4-byte characters, but multi-byte characters are not recognized ustr = ucs4_ 'Hello World and Ni Hao -- ' & // char ( int ( z '4F60' ), ucs4 ) & // char ( int ( z '597D' ), ucs4 ) astr = ucs4_to_utf8 ( ustr , err ) call checkit ( 'convert to ascii bytes representing utf8' , astr == 'Hello World and Ni Hao -- 你好' ) if ( total . ne . 0 ) then write ( * , * ) total , 'failures' stop 1 endif contains subroutine checkit ( label , test ) character ( len =* ), intent ( in ) :: label logical , intent ( in ) :: test write ( * , * ) merge ( 'PASSED' , 'FAILED' , test ), ' ' , label if (. not . test ) total = total + 1 end subroutine checkit end program check","tags":"","url":"sourcefile/check.f90.html"}]}